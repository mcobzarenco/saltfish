package reinferio.saltfish;

import "source.proto";


/*****************   SourceManager::create_source   *****************/

message CreateSourceRequest {
    optional string source_id = 1;
    optional reinferio.source.Schema schema = 2;
}

message CreateSourceResponse {
    enum Status {
	OK = 0;
	ERROR = 1;
    }
    optional Status status = 1;
    optional string msg = 2;

    optional string source_id = 3;
}


/*****************   SourceManager::delete_source   *****************/

message DeleteSourceRequest {
    required string source_id = 1;
}

message DeleteSourceResponse {
    enum Status {
	OK = 0;
	NO_SUCH_SOURCE = 1;
	ERROR = 2;
    }
    optional Status status = 1;
    optional string msg = 2;
}


/*****************    SourceManager::generate_id    *****************/

message GenerateIdRequest {
    enum IdType {
	SOURCE = 0;
	ROW = 1;
    }
    optional IdType id_type = 1;
    optional uint32 count = 2;
}

message GenerateIdResponse {
   enum Status {
	OK = 0;
	ERROR = 1;
    }
    optional Status status = 1;
    optional string msg = 2;
    repeated string ids = 3;
}


/*****************     SourceManager::push_rows     *****************/

message PushRowsRequest {
    optional string source_id = 1;
    optional reinferio.source.Row rows = 2;
}

message PushRowsResponse {
    enum Status {
	OK = 0;
	INVALID_SCHEMA = 1;
	ERROR = 2;
    }
    optional Status status = 1;
    optional string msg = 2;
}


/*****************           SourceManager          *****************/

service SourceManager  {
    rpc create_source(CreateSourceRequest) returns (CreateSourceResponse);
    rpc delete_source(DeleteSourceRequest) returns (DeleteSourceResponse);
    rpc generate_id(GenerateIdRequest) returns (GenerateIdResponse);
    rpc push_rows(PushRowsRequest) returns (PushRowsResponse);
}
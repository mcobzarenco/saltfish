package reinferio.saltfish;

import "source.proto";


/*****************      SourceManager::create_source      *****************/

message CreateSourceRequest {
  optional reinferio.source.Source source = 1;
}

message CreateSourceResponse {
  enum Status {
    UNKNOWN_ERROR = 0;
    OK = 1;
    DUPLICATE_FEATURE_NAME = 2;
    SOURCE_ID_ALREADY_EXISTS = 3;
    NETWORK_ERROR = 4;
  }
  optional Status status = 1;
  optional string msg = 2;

  optional string source_id = 3;
}


/*****************      SourceManager::delete_source      *****************/

message DeleteSourceRequest {
  required string source_id = 1;
}

message DeleteSourceResponse {
  enum Status {
    UNKNOWN_ERROR = 0;
    OK = 1;
    NETWORK_ERROR = 2;
  }
  optional Status status = 1;
  optional string msg = 2;
}


/*****************      SourceManager::generate_id      *****************/

message GenerateIdRequest {
  enum IdType {
    INVALID = 0;
    SOURCE = 1;
    ROW = 2;
  }
  optional IdType id_type = 1;
  optional uint32 count = 2;
}

message GenerateIdResponse {
  enum Status {
    UNKNOWN_ERROR = 0;
    OK = 1;
    COUNT_TOO_LARGE = 2;
  }
  optional Status status = 1;
  optional string msg = 2;
  repeated string ids = 3;
}


/*****************      SourceManager::put_records      *****************/

// TODO(mcobzarenco): Created nested message for id-record pair or message for
// batch.
// TODO(mcobzarenco): Think about what happens to empty record_ids.
// TODO(mcobzarenco): Make Metadata message type which contains Schema.
message PutRecordsRequest {
  optional string source_id = 1;
  repeated string record_ids = 2;
  repeated reinferio.source.Record records = 3;
}

message PutRecordsResponse {
  enum Status {
    UNKNOWN_ERROR = 0;
    OK = 1;
    INVALID_SCHEMA = 2;
    INVALID_SOURCE_ID = 3;
    NO_RECORDS_IN_REQUEST = 4;
    WRONG_NUMBER_OF_IDS = 5;
    INVALID_RECORD = 6;
    NETWORK_ERROR = 7;
  }
  optional Status status = 1;
  optional string msg = 2;

  repeated string record_ids = 3;
}


/*****************            SourceManagerService           *****************/

service SourceManagerService  {
  rpc create_source(CreateSourceRequest) returns (CreateSourceResponse);
  rpc delete_source(DeleteSourceRequest) returns (DeleteSourceResponse);
  rpc generate_id(GenerateIdRequest) returns (GenerateIdResponse);
  rpc put_records(PutRecordsRequest) returns (PutRecordsResponse);
}


/*****************     SourceSamplerService::sample_source    *****************/

message SampleSourceRequest {
  optional string source_id = 1;
  optional uint32 max_count = 2;
}

message SampleSourceResponse {
  enum Status {
    UNKNOWN_ERROR = 0;
    OK = 1;
    NETWORK_ERROR = 2;
  }
  optional Status status = 1;
  optional string msg = 2;

  repeated reinferio.source.Record records = 3;
}


/*****************            SourceSamplerService            *****************/

service SourceSamplerService  {
  rpc sample_source(SampleSourceRequest) returns (SampleSourceResponse);
}
